# 9.그래프와 시각화
# Plotting and Visualization
# p347 op253
# seaborn이 실제로는 더 쓸만함

import matplotlib.pyplot as plt
import numpy as np

# matplotlib의 plot
data = np.arange(10)
plt.plot(data)
    # array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
    # 값은 점인데 왜 선이 그려지지?
    ## pandas도 선형 그래프가 나오는 걸 보니 np의 문제일 것 같음.
    ## 혹은 plt.plot과 pd.plot 둘 다 같은 처리를 하거나.
    ### plot 명령은 디폴트값이 선그래프
    ### 점그래프는 옵션을 준다.

# pandas의 plot
import pandas as pd
df = pd.DataFrame(data)
df.plot()


# 9.1.1 figure과 서브플롯
# p349
# In[방법1]
fig = plt.figure()
    # <Figure size 432x288 with 0 Axes>
    # 이미지 사이즈 정할 수 있음
type(fig)   # matplotlib.figure.Figure

ax1 = fig.add_subplot(2,2,1)
    # 2,2,1 : 2*2= 4개 중에 1번째를 그림으로 그려줘
ax2 = fig.add_subplot(2,2,2)
ax3 = fig.add_subplot(2,2,3)
    plt.plot(np.random.randn(50))
ax4 = fig.add_subplot(2,2,4)
    plt.plot(np.random.randn(100))

## fig 정의부터 서브플롯 코드를 모두 동시에 실행해야 그래프 그려줌
## subplot 아래 있는 그래프 코드를 해당 칸에 그려줌

# In[방법2]
# p352
fig, axes = plt.subplots(2,3)
axes
    # 2행3열 그래프 보여줌

plt([1.5,3.5,-2,1.6])
    # https://suuntree.tistory.com/271
    # 마지막으로 생성한 코드를 그래프로 만들어줌

#----------------------------------------
# 9.2.1
# p366 op269
# 점그래프 그리기
list_a = [1,2,3,4,5]
plt.plot(list_a, 'ro')
    # ro: red dot
    # plot line의 디폴트 값은 blue ('o')

# linspace()
x = np.linspace(1,6,100)
y = np.sin(x)
plt.plot(x,y)

# 그래프 겹쳐 그리기
z = np.cos(x)
plt.plot(x,y) + plt.plot(x,z)

plt.plot(x,np.sin(x)) + plt.plot(x,np.cos(x))

# x축 범위 주기
x = np.linspace(0,2*np.pi,200)  # 3번째 칸?
    x = np.linspace(0,2*np.pi,5)   # 그래프에 찍을 도트 개수
plt.plot(x,np.sin(x)) + plt.plot(x,np.cos(x))


## 메서드 s 주의
# p369 op272
fig, axes = plt.subplots(2,1)
data = pd.Series(np.random.rand(16), index=list('abcdgesfwaasdfsa'))
data.plot.bar(ax=axes[0], color='k', alpha=0.7)
data.plot.barh(ax=axes[1], color='k', alpha=0.7)

# p370 op273
df = pd.DataFrame(np.random.rand(6, 4),
                  index=['one', 'two', 'three', 'four', 'five', 'six'],
                  columns=pd.Index(['A', 'B', 'C', 'D'], name='Genus'))
df.plot.bar()
    # 열은 범례로 그려지고 index는 x축으로 감
df.plot(kind = 'barh')
df.plot(kind = 'area')
df.plot(stacked='True', alpha = 0.8)

# p371
tips = pd.read_csv("examples/tips.csv")
tips.columns

party_counts = pd.crosstab(tips['day'], tips['size'])
    '''
    size  1   2   3   4  5  6
    day                      
    Fri   1  16   1   1  0  0
    Sat   2  53  18  13  1  0
    Sun   0  39  15  18  3  1
    Thur  1  48   4   5  1  3
    '''
# party_counts = pd.crosstab(tips.day, tips.size)
    '''
    # tips.열이름으로 넣으면 day행 size열 표를 만들고
      각 행의 합이 다 나온다
    col_0  1464
    day        
    Fri      19
    Sat      87
    Sun      76
    Thur     62
    '''
party_counts = party_counts.iloc[:,1:5]
    # size... 파티에 온 일행수 2명 이상 5명 이하 골라줌
    # [1]~[5-1]
party_pcts = party_counts.div(party_counts.sum(1),axis=0)
    # div : 나누다
    # party_counts.sum(1): 각 행(axis 1)의 합
    # 파티에 온 사람들 수를 요일별 사람들 수로 각각 나눠줌
party_pcts.plot.bar()


#----------------------------------------
# matplotlib.plot과 seaborn과 비교
# p373 op276
import seaborn as sns
tips['tip_pct'] = tips['tip'] / (tips['total_bill'] - tips['tip'])
    # tip_pct 만들기 = 팁/(총액-팁)
tips.head()
sns.barplot(x='tip_pct', y='day', data=tips, orient='h')
    # seaborn은 x, y를 column으로 지정함
party_pcts.plot.bar()
    # matplotlib은 x, y를 자동으로 지정함
    # x는 행, y는 값을 자동으로, 범례는 열
plt.show()

# 그래프 x,y축 바꾸기
# p374
sns.barplot(x='tip_pct', y='day', hue='time', data=tips, orient='h')
sns.barplot(y='tip_pct', x='day', hue='time', data=tips)
    # orient='h'가 있는 경우 x가 반드시 숫자 범주여야 함
    # Horizontal orientation requires numeric `x` variable.

tips.columns
tips[['tip_pct', 'day']]
    # day 칼럼의 각 값이 여러 개
    # 자동으로 tip_pct의 평균값으로 그래프를 그려줌

# 그래프를 그리는 3가지 방법
tips['tip_pct'].plot.hist(bins=40)
tips['tip_pct'].plot(kind='hist', bins=40)
sns.histplot(data = tips, x='tip_pct', bins=40)

# x 범례 지정
tips['tip_pct'].plot(kind='hist', bins=40, xlim=(0.0, 0.5))
s = sns.histplot(data = tips, x='tip_pct', bins=40)
set(xlim=(0.0,0.5), ylim=(1,100))
    # seaborn에서 x limit 지정하는 방법?
plt.show()


# 산포도
# x, y가 모두 숫자 범주여야 함

# 9.2.5 패싯 그리드와 범주형 데이터
# Facet Grids and Categorical Data
# p380 op283

sns.factorplot(x = 'day', y='tip_pct', hue='time', col='smoker',
               kind='bar', data=tips[tips.tip_pct<1])
    # hue = 'time'
    # The `factorplot` function has been renamed to `catplot`.
    # Note that the default `kind` in `factorplot` (`'point'`) has changed `'strip'` in `catplot`.

sns.catplot(x = 'day', y='tip_pct', hue='time', col='smoker',
            kind='bar', data=tips[tips.tip_pct < 1])
    # 카테고리플롯

sns.catplot(x = 'day', y='tip_pct', row='time', col='smoker',
            kind='bar', data=tips[tips.tip_pct < 1])
    # row = 'time'

#----------------------------------------
# style 적용 (p374)
sns.catplot(x = 'day', y='tip_pct', kind='bar', data=tips[tips.tip_pct < 1])
sns.set(style="whitegrid")

sns.catplot(x = 'day', y='tip_pct', kind='bar', data=tips[tips.tip_pct < 1])
sns.set_style="whitegrid"
    # 얘는 왜 적용할 때마다 약간 바뀌지

sns.catplot(x = 'day', y='tip_pct', kind='bar', data=tips[tips.tip_pct < 1])
sns.set(style="darkgrid")

#----------------------------------------

# x, y 바꿔보기
sns.catplot(x='day', y='tip_pct', data=tips[tips.tip_pct<1])
sns.catplot(y='day', x='tip_pct', data=tips[tips.tip_pct<1])

# kind = 'box'
sns.catplot(x = 'day', y='tip_pct', kind='box', data=tips[tips.tip_pct < 1])
sns.catplot(y = 'day', x='tip_pct', kind='box', data=tips[tips.tip_pct < 1])
sns.set(style="whitegrid")
    # p382 그림 9-28

