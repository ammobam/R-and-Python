# 5.2.4 정수 색인
# p209 op145
ser = pd.Series(np.arange(3.))
ser[:1]
ser.loc[:'1']
ser.iloc[:1]

# 5.2.5 산술 연산과 데이터 정렬
# Arithmetic and Data Alignment
# p201 op146
s1 = pd.Series([7.3, -2.5, 3.4, 1.5], index = ['a','c','d','e'])
s2 = pd.Series([-2.1, 3.6, -1.5, 4, 3.1],
               index=['a', 'c', 'e', 'f', 'g'])

s1 + s2

df1 = pd.DataFrame(np.arange(9.).reshape((3, 3)), columns=list('bcd'),
                   index=['Ohio', 'Texas', 'Colorado'])
df2 = pd.DataFrame(np.arange(12.).reshape((4, 3)), columns=list('bde'),
                   index=['Utah', 'Ohio', 'Texas', 'Oregon'])

df1 + df2

# 산술 연산 메서드에 NaN값 대신 넣을 값 지정하기
# Arithmetic methods with fill values
# p213 op148

df1 = pd.DataFrame(np.arange(12.).reshape((3,4)), columns=list('abcd'))
df2 = pd.DataFrame(np.arange(20.).reshape((4, 5)), columns=list('abcde'))
df2.loc[1,'b'] = np.nan

df1 + df2
df1.add(df2, fill_value=0)
    # NaN값에 0을 채워 add 연산

df1.div(1)  # div   # df1/1
df1.rdiv(1) # rdiv  # 1/df1 와 동일
df1.sub(df2, fill_value=0)  # sub   # df1 - df2
df1.rsub(df2, fill_value=0) # rsub  # df2 - df1


# Operations between DataFrame and Series
# p215 op149

fra1 = pd.DataFrame(np.arange(12.).reshape((4, 3)),
                    columns=list('bde'),
                    index=['Utah', 'Ohio', 'Texas', 'Oregon'])
ser1 = frame.iloc[0]

fra1 - ser1
fra1.columns
ser1.index
    # series의 index와 동일한 dataframe의 column에 대해
    # broadcasting 되어 연산함

ser2 = pd.Series(range(3), index=['b','e','f'])
fra1 + ser2
fra1.columns
ser2.index
    # 일부만 동일해도 적용됨

# 5.2.6 Function Application and Mapping
# p217 op151

frame = pd.DataFrame(np.random.randn(4, 3), columns=list('bde'),
                     index=['Utah', 'Ohio', 'Texas', 'Oregon'])
np.abs(frame)
f = lambda x: x.max() - x.min()
frame.apply(f)
    # 각 열이름을 index
    # 각 열의 최댓값에서 최솟값을 뺀 값을 요소로 하는 Series 반환
frame.apply(f, axis = 1)
    # apply 적용 범위를 열로 하면, 각 행에 대해 한 번 씩 수행
    # p218
'''
arr = np.arange(6).reshape(2,3)
sum(arr)    # 각 열의 합을 리스트로
np.sum(arr)     # 요소합
np.sum(arr, axis = 0)   # 각 열의 합을 리스트로
np.sum(arr, axis = 1)   # 각 행의 합을 리스트로
'''
max(frame['e'])
np.max(frame, axis=1)

frame.apply(max, axis=0)
frame.apply(min, axis=0)
frame.apply(f)

frame['e'].map(format)
    # p219 중요하대

# 5.2.7 Sorting and Ranking
# p220 op153
obj = pd.Series([7,-5,7,4,2,0,4])
obj.sort_index()
obj.rank()  # 작은 수부터 1.0, 2.0... 공동n위이면 n.5
obj.rank(method = 'first')  # 공동 n위 중 먼저 등장한 수가 먼저 랭킹됨


# 5.2.8 중복 색인
# p224
df = pd.DataFrame(np.random.randn(2, 3), index=['a', 'b'])
df.index.is_unique

