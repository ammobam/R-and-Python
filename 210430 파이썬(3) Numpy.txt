# Numpy
import numpy as np
'''
np.(함수)
arange
linspace    # 
zeros
ones
empty
full
tile
**__like
'''
# linspace
a = np.linspace(0,1,6)
    # 0부터 1까지 동일한 폭으로 6개의 숫자를 꺼냄
a = np.linspace(1,10,10)

# ones
a = np.ones((3,3), int)
    # 3행 3열 int타입으로 1이 채워진 행렬 만들기
a*3
    # 이렇게 하면 모두 3으로 채워진 행렬 만들어짐
a = 3*np.ones((3,3), int)

# zeros
b = np.zeros((3,3)) # 0으로 채워진 행렬
b[2,0] = 3  # 2행 0열이 3으로 수정됨
            # sparse matrix : 대부분 0으로 이뤄진 행렬인데 드물게 다른 수 나옴

# digonal 대각선으로 1,2,3,..
a = np.diag([1,2,3])
    '''
    array([[1, 0, 0],
           [0, 2, 0],
           [0, 0, 3]])
    '''
c = np.arange(9).reshape(3,3)
np.diag(c)  # array([0, 4, 8])

# identity 단위행렬(I 또는 E)
d = np.identity(2)
    '''
    array([[1., 0.],
           [0., 1.]])
    '''

# eye 정사각행렬이 아님
d = np.eye(4,3)
d = np.eye(3,4)
    '''
    array([[1., 0., 0., 0.],
           [0., 1., 0., 0.],
           [0., 0., 1., 0.]])
    '''

# tile
np.tile(a,3) # 반복

# full
np.full((4,3),2)
    '''
    array([[2, 2, 2],
           [2, 2, 2],
           [2, 2, 2],
           [2, 2, 2]])
    '''

# empty
d = np.empty
    # 주소값이 들어감

# ***_like
np.ones_like(a)
    # 행렬 a의 shape과 데이터 타입(int..)을 가져와서 1로 채움
np.zeros_like(a)
    # 행렬 a의 shape과 데이터 타입(int..)을 가져와서 0으로 채움
np.full_like(a, 3)
    # 행렬 a의 shape과 데이터 타입(int..)을 가져와서 지정한 수로 채움


# Numpy copy()의 두 가지 방법
copy() # 새로운 객체를 만든다
slice, indexing # 참조할 뿐. View

A = np.arange(1,6)
B = A.copy()    # B = np.copy(A)와 같은 코드
B[3]=0
A   # array([1, 2, 3, 4, 5])
B   # array([1, 2, 3, 0, 5])

C = A
C[3]=0
C   # array([1, 2, 3, 0, 5]), View라고 부
A   # array([1, 2, 3, 0, 5])


#-----------------
# stack : 배열의 결합
# stack이란 FIFO. 선착순의 반대
'''
hstack
vstack
dstack
concatenate
'''
# h스택, v스택
a = np.arange(5)
np.hstack([a*10, a*20])     # horizon하게 쌓음
np.vstack([a*10, a*20])     # vertical로 쌓음
    # ([])이든 (())이든 묶어주기만 하면 잘 작동함

## 행렬 두 개
a = np.arange(1,5).reshape(2,2)
b = np.arange(5,9).reshape(2,2)

np.hstack([a, b])
np.vstack([a, b])

# d스택
a = np.arange(5)
np.dstack([a*10, a*20])     # 행을 열로, 열을 행으로. vertical하게.
np.dstack((a*10, a*20))
    # depth?


#-----------------
# 배열의 분리 spliting
'''
hsplit 수평분리
vsplit 수직분리
*split(행렬명, n개로 쪼개기)
'''
a = np.arange(1,9).reshape(2,4)
np.hsplit(a,2)
np.vsplit(a,2)

a = np.arange(1,10).reshape(3,3)
np.hsplit(a,3)
np.vsplit(a,3)
    # 행렬 수와 쪼개는 수가 안맞으면 오류남
    # ValueError: array split does not result in an equal division

# 평탄화 flatten, ravel
a = np.arange(1,5).reshape(2,2)
c = a.flatten()     # array([1, 2, 3, 4])
d = a.ravel()

c[0]=7  # a 안 바뀜
d[0]=77 # a 바뀜

# 전치 Transpose (방법 3가지)
a = np.arange(1,7).reshape(2,3)

a.T
np.transpose(a)
np.swapaxes(a,0,1)  # axis0, axis1을 swap

#-----------------
# 배열의 비교
'''
1. ==
2. >, <     # 1,2는 element wise하게 비교
3. np.array_equal(a,b)  # 전체 행렬으로 비교
'''

# 정렬하기
a = np.arange(5,1,-1)

np.sort(a)  # 원본 a는 안 변함
a.sort()    # 원본 a는 변함
a[::-1] # a[start:stop:순서(1,-1)]
        # a 역순으로 정렬함. 하지만 원본은 변하지 않음

# np.sum
a = np.arange(1,7).reshape(2,3)
sum(a)  # array([5, 7, 9])  # element wise하게 합해서 리스트로 만들어줌

np.sum(a)   # 21 # 내부 요소 전체 합
np.sum(a, axis=0)   # 열끼리 합한 리스트
np.sum(a, axis=1)   # 행끼리 합한 리스트

#-----------------
# 인덱싱 indexing
a = np.array([[0,1,2,3],[10,11,12,13]])
a[1,3] = -1

# 1행 추출하기
a[0]
a[0,]
a[0, :] # [:] 처음부터 끝까지 선택한단 뜻

# 1열 추출하기
a[:,0]  # 얘만 됨

a.reshape(1,8)
a[1:-2]

array[ h : c : step ]

#-----------------

# 연습문제: 행렬 만들고 원하는 값 뽑은 행렬 만들기
q = np.arange(0,25).reshape(5,5)

q[1::2, 0:3:2] # 5,7,15,17
q[4,:] # 20,21,22,23,24

#-----------------
# index 번호를 따로 리스트로 저장해뒀다가 일괄 관리 가능
a = np.arange(0,80,10);a    # ;a 붙이면 바로 열어서 보여줌

## 방법(1) indices
a[[1,2,-3]]     # index 1,2,-3번째 요소 꺼내서 리스트 만들어줌

indices = [1,2,-3]
a[indices]

a[indices] = 99     # a 원본도 변해 있다

## 방법(2) mask
mask = np.array([0,1,1,0,0,1,0,0], dtype = bool)
a[mask]

a>30    # True / False 값으로 나옴
a[ a>30 ]   # 인덱스에 T/F 넣음으로서 검색 가능

#-----------------
# 팬시 인덱싱 Fancy indexing
a = np.arange(12).reshape(4,3)
[a[0,1], a[1,2], a[1,1],a[3,2]]
a[[0,1,1,3],[1,2,1,2]]
    # 위 아래 같은 인덱싱임 [[행 인덱스 모음],[열 인덱스 모음]]

## 연습
q = np.arange(0,25).reshape(5,5)
q[[0,1,2,3],[1,2,3,4]]
    # q[[0:4],[1:5]] 이렇게는 안 됨
maskr = np.array([1,1,1,1,1], dtype = bool)
maskc = np.array([0,1,1,1,1], dtype = bool)
q[maskr, maskc]
q[[0,1,2,3], maskc] # ?
q[[0,1,2,3], [1,2,3,4]]

#-----------------
# 브로드캐스팅이란
''' 
차원이 다른 두 배열의 연산에서
낮은 차원의 배열이 차원을 맞추어 주도록 변환한다.
데이터의 복사를 하지 않으므로 빠르다.
'''
a = np.ones((3,5))
a + 1

#-----------------
# ufunc
'''
2차원에서
axes=0 == axes=-2
axes=1 == axes=-1
'''
np.shape(a)
'''
3차원 행렬
(z,y,x) 순으로 적힘
z페이지, y열, x행
'''
a = np.array([3,1,5,2,33,4,0,1])
np.min(a)       # 최소값
a.min
np.max(a)       # 최대값
a.max
np.argmin(a)    # 최소값이 나오는 index
np.argmax(a)    # 최대값이 나오는 index

a.std()
a.mean()

np.where(a>7)   # 조건에 맞는 값의 index를 알려줌
a[np.where(a>7)]    # a[index]로 해당 값 꺼내기


## 연습문제
a = np.arange(-15,15).reshape(5,6)**2
# 각 행별 최대값은?
np.max(a)
# 각 열별 평균값은?
np.mean()

#-----------------
# 넘파이가 빠른 이유
'''
1.Numpy의 메모리 저장 위치 vs Python의 메모리 저장 위치
2.Numpy의 메모리 저장 구조 (stride)
    데이터를 1줄로만 저장. 1xn열..
    Python에서 읽어낼 시 논리 구조로 보여지는 것만 바꿈
3.C언어
'''







np.concatenate(a)