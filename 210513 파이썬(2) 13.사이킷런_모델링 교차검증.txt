# 13. 파이썬 모델링 라이브러리
# Introduction to Modeling Libraries in Python
# p505 op383
import pandas as pd
import numpy as np

# 13.1 pandas와 모델 코드의 인터페이스
# dataframe을 numpy.array로 변환하기 : df.values

data = pd.DataFrame({
    'x0':[1,2,3,4,5],
    'x1':[0.01, -0.01, 0.25, -4.1, 0],
    'y':[-1.5,0.,3.6,1.3,-2.]})

data.columns
data.values
    type(data.values)
    # numpy.ndarray
    # DataFrame을 Numpy배열로
    # .values는 데이터가 한가지 타입으로 이뤄져있다는 가정 하에 작동
    
data1 = data
data1['s']=['a','b','c','d','e']
data1.values
    # dtype=object  # p507 설명 참고
    # .values가 작동하는데 pandas의 객체를 반환함
    type(data1.values)
    # numpy.ndarray     # ?

data.to_numpy()
    '''
    https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.values.html
    '''


# 13.2 Patsy -> pass
# 13.3 Statsmodels -> pass

#-------------------------------------------
# 13.4 scikit-learn 소개
# p523 op397

# 타이타닉 생존률 예측하기
'''
http://hleecaster.com/ml-logistic-regression-example/
'''
# 1. 데이터어레이 준비단계-------------------
# Model Fitting: 답안에 가까운 선형 모델을 뽑아내는 과정 
train = pd.read_csv('examples/train.csv')
    # 연습할 데이터
test = pd.read_csv('examples/test.csv')
    # 검증 데이터

train[:4]
train.columns
train.survived

train.shape     # (891, 12)
test.shape      # (418, 11)
    # train 데이터셋을 test 데이터셋으로

train.isnull().sum()
test.isnull().sum()
    # 사이킷런 라이브러리는 일반적으로 누락된 데이터 처리 못하므로
    # 결측치 먼저 확인하고 시작
train['Age'].describe()
impute_value = train['Age'].median()
train['Age'] = train['Age'].fillna(impute_value)
    # 'Age'열 NaN값에 중앙값을 채워줌
test['Age'] = train['Age'].fillna(impute_value)


# train 세트에 "IsFemale" 열을 추가하고
# Sex == Female이면 True 값을 갖도록 한다
train['IsFemale'] = train['Sex']=='female'
# True = 1, False = 0 으로 바꾸자
train['IsFemale'] = (train['Sex']=='female').astype(int)


# 3개의 열 "Pclass", "IsFemale", "Age"을 뽑아서 데이터셋 X_train_df 만들기
X_train_df = train[['Pclass','IsFemale','Age']]

# 이 데이터프레임을 어레이 X_train 만들기
X_train = X_train_df.values
        '''
        X_train
        array([[ 3.,  0., 22.],
               [ 1.,  1., 38.],
               [ 3.,  1., 26.],
               ...,
               [ 3.,  1., 28.],
               [ 1.,  0., 26.],
               [ 3.,  0., 32.]])
        '''

# test 데이터셋에도 IsFemale 정수열 추가해서 X_test 어레이 만들기
test['IsFemale'] = (test['Sex']=='female').astype(int)
X_test = test[['Pclass','IsFemale','Age']].values
        '''
        X_test
        array([[ 3.,  0., 22.],
               [ 3.,  1., 38.],
               [ 2.,  0., 26.],
               ...,
               [ 3.,  0., 28.],
               [ 3.,  0., 34.],
               [ 3.,  0., 18.]])
        '''

# 2. 데이터어레이 비교해서 각 승객의 생존률 예측하기-------------------
# Survived 항목과 비교
y_train = train['Survived']     # pandas.core.series.Series
y_train = train['Survived'].values  # numpy.ndarray
type(y_train)

    # 데이터 개수 확인
X_train.shape   # (891,3)
y_train.shape   # (891,)

# model 인스턴스 생성하자
from sklearn.linear_model import LogisticRegression
    # LogisticRegression는 대문자로 시작...클래스
model = LogisticRegression()
    # 빈 모델

model.fit(X_train, y_train)
    # model 안에 두 어레이를 넣으면 알아서 model 찾아줌

print(model.score(X_train, y_train))
    # 0.7878787878787878
    # 학습세트 정확도  # 이게 왜????? # 사이트 참고


y_pre = model.predict(X_test)
    # type(y_pre): numpy.ndarray
    # [0,0,0,0,1...]


# 교차검증
'''
교차검증이란?
과적합(overfitting, 동일데이터로 반복검증하는 것)을 피해 검증하도록
데이터셋을 겹치지 않게 조각내어 서로 검증을 수행하는 것
https://scikit-learn.org/stable/modules/cross_validation.html
'''
## 방법1. 로지스터 교차검정 라이브러리 이용
from sklearn.linear_model import LogisticRegressionCV

model_cv = LogisticRegressionCV(Cs=10)
    # Cs: 정규화. 값이 작을수록 정교하게 정규화함
    '''
    https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegressionCV.html
    '''
model_cv.fit(X_train, y_train)
print(model_cv.score(X_train, y_train))
    # 0.7890011223344556
    # 교차검증하면 정확도가 올라간다

## 방법2. 직접 데이터 쪼개서 교차검증한다
from sklearn.model_selection import cross_val_score
model = LogisticRegression(C=10)
scores = cross_val_score(model, X_train, y_train, cv=4)
    # array([0.77578475, 0.79820628, 0.77578475, 0.78828829])
    # 여기서 cv는 데이터 조각내는 수
    # cv=4는 X_train 데이터를 겹치지 않게 4조각 내서 교차검증함




